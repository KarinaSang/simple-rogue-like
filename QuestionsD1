1. How could you design your system so that each race could be easily generated? 
Additionally, how difficult does such a solution make adding additional classes?
- We can employ Decorator design pattern. We will have one base class called Player which
has a list of attributes including HP, Atk, and Def, as well as a function called "specialAbility".
We will also have a list of ability decorators, so we can modify the BasicPlayer with these
decorators. With this approach, it is very easy to generate each race because we do not
have to have subclasses for each race, we can just create a BasicPlayer with the corresponding
race base ratios and apply different ability decorators on BasicPlayer for different races. Adding
additional races would at most require an extra ability decorator; if we want to create an elf-orc,
and we already have an elf and orc ability decorator, then we can simply apply both ability decorators
to our BasicPlayer without creating additional classes.

2. How does your system handle generating different enemies? Is it different from 
how you generate the player character? Why or why not?
- We will use a similar approach to generate enemies as generating the player character. We
will also have a list of ability decorators for generating different enemies and a BasicEnemy
class. Generating enemies and player character are similar because enemies also strictly differ from each
other in terms of their special ability, and enemies' base ratio can be modified by just having a
BasicEnemy class. However, we will have an extra field in a BasicEnemy called "hostile", because we want
to store the information of whether or not the current enemy will attack the player character.

3. How could you implement special abilities for different enemies. 
For example, gold stealing for goblins, health regeneration for trolls, 
health stealing for vampires, etc.?
- have a function called *specialAbility*, and override the function in each enemy class

4. What design pattern could you use to model the effects of temporary potions(Would/Boost/Atk/Def) 
so that you do not need to explicitly track which potions the player character has consumed on 
any particular floor?
- visitor?

5. How could you generate items so that the generation of Treasure, Potions, and major items reuses 
as much code as possible? That is for example, how would you structure your system so that the generation
of a potion and then generation of treasure does not duplicate code? How could you resuse the code used
to protect both dragon hoards and the Barrier Suit?
- Since the generation of Treasure, Potions, and major items is random, we can utilize the template syntax that
c++ provides. We will create a template for a function that does random generation. The function will have a return
type that changes depending on whether we are calling it with treasure or potions, so treasure and potions can both 
use the same skeleton function. Similarly, we can create skeleton function to let a dragon guard "something", which can
either be a dragon hoard or the Barrier Suit using templates. 

